{
  "openapi": "3.1.0",
  "info": {
    "title": "Parallel API",
    "description": "Parallel API",
    "contact": {
      "name": "Parallel Support",
      "url": "https://parallel.ai",
      "email": "support@parallel.ai"
    },
    "version": "0.1.2"
  },
  "paths": {
    "/v0/org": {
      "post": {
        "tags": ["account"],
        "summary": "Create organization",
        "description": "Create a new organization with the provided details. Also adds a user to the organization.",
        "operationId": "create_org_v0_org_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgInfoResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/internal/org": {
      "post": {
        "tags": ["account"],
        "summary": "Create organization (internal)",
        "description": "Create a new organization with the provided details",
        "operationId": "create_org_v0_internal_org_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgInfoResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v0/internal/whitelist": {
      "post": {
        "tags": ["account"],
        "summary": "Whitelist signatures",
        "description": "Whitelist signatures for access",
        "operationId": "whitelist_future_access_internal_v0_internal_whitelist_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhitelistEntityRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OrgInfoResponseModel"
                    },
                    {
                      "$ref": "#/components/schemas/WhitelistEntityResponseModel"
                    }
                  ],
                  "title": "Response Whitelist Future Access Internal V0 Internal Whitelist Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v0/internal/domain": {
      "post": {
        "tags": ["account"],
        "summary": "Update domain access",
        "description": "Allow or disallow a domain for access",
        "operationId": "update_domain_access_internal_v0_internal_domain_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainAccessRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/OrgInfoResponseModel"
                    },
                    {
                      "$ref": "#/components/schemas/WhitelistEntityResponseModel"
                    }
                  ],
                  "title": "Response Update Domain Access Internal V0 Internal Domain Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v0/onboard": {
      "post": {
        "tags": ["account"],
        "summary": "Onboard",
        "description": "Onboard an individual.\n\nCan only onboard if the user exists in the system.",
        "operationId": "onboard_v0_onboard_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgInfoResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/add_domain": {
      "post": {
        "tags": ["account"],
        "summary": "Add default domain for an org",
        "description": "Add default domain for an org",
        "operationId": "add_default_domain_for_org_v0_org__org_id__add_domain_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultDomainResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/remove_domains": {
      "post": {
        "tags": ["account"],
        "summary": "Remove default domains for an org",
        "description": "Remove default domains for an org",
        "operationId": "remove_default_domains_for_org_v0_org__org_id__remove_domains_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveDefaultDomainsRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultDomainResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}": {
      "get": {
        "tags": ["account"],
        "summary": "Get organization info",
        "description": "Get detailed information about an organization",
        "operationId": "view_org_metadata_v0_org__org_id__get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          },
          {
            "name": "fetch_entitlement",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Fetch Entitlement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgInfoResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/apps": {
      "get": {
        "tags": ["account"],
        "summary": "Get organization apps",
        "description": "Get all apps associated with an organization",
        "operationId": "get_apps_for_org_v0_org__org_id__apps_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppsForOrgResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/app_api_keys": {
      "post": {
        "tags": ["account"],
        "summary": "Get app api key for organization",
        "description": "Get api key associated with an app for an organization",
        "operationId": "get_raw_app_api_keys_v0_org__org_id__app_api_keys_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRawApiKeysRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRawApiKeysResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/keys": {
      "get": {
        "tags": ["account"],
        "summary": "Get organization keys (obfuscated)",
        "description": "Get all keys (obfuscated) associated with an organization",
        "operationId": "get_keys_for_org_v0_org__org_id__keys_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiKeysForOrgResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/create_app": {
      "post": {
        "tags": ["account"],
        "summary": "Create app",
        "description": "Create a new app in an organization",
        "operationId": "create_app_v0_org__org_id__create_app_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/apps/{app_id}": {
      "delete": {
        "tags": ["account"],
        "summary": "Delete app",
        "description": "Delete an app from an organization",
        "operationId": "delete_app_v0_org__org_id__apps__app_id__delete",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "App Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/apps/{app_id}/keys/{api_key_id}": {
      "delete": {
        "tags": ["account"],
        "summary": "Delete key",
        "description": "Delete a key from an app",
        "operationId": "delete_key_v0_org__org_id__apps__app_id__keys__api_key_id__delete",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "App Id"
            }
          },
          {
            "name": "api_key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Api Key Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/apps/{app_id}/create_key": {
      "post": {
        "tags": ["account"],
        "summary": "Create key",
        "description": "Create a new key for an app",
        "operationId": "create_key_v0_org__org_id__apps__app_id__create_key_post",
        "deprecated": true,
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "App Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/internal/org/{org_id}": {
      "delete": {
        "tags": ["account"],
        "summary": "Disable org",
        "description": "Disables an organization and all resources",
        "operationId": "disable_org_internal_org__org_id__delete",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/invite": {
      "post": {
        "tags": ["account"],
        "summary": "Invite user",
        "description": "Invite a user to an organization. If the user already exists, they will be added to the organization. If the role already exists, an error will be raised.",
        "operationId": "invite_user_v0_org__org_id__invite_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrgRelation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/get_payment_methods": {
      "get": {
        "tags": ["account"],
        "summary": "Get Card Payment Methods",
        "description": "Get payment methods for an organization.",
        "operationId": "get_card_payment_methods_v0_org__org_id__get_payment_methods_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          },
          {
            "name": "payment_method_type",
            "in": "query",
            "required": false,
            "schema": {
              "enum": ["card"],
              "const": "card",
              "type": "string",
              "default": "card",
              "title": "Payment Method Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/CreditCardPaymentMethod"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentMethod"
                      }
                    ]
                  },
                  "title": "Response Get Card Payment Methods V0 Org  Org Id  Get Payment Methods Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/has_payment_method": {
      "get": {
        "tags": ["account"],
        "summary": "Has Payment Method",
        "description": "Get payment methods for an organization.",
        "operationId": "has_payment_method_v0_org__org_id__has_payment_method_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Has Payment Method V0 Org  Org Id  Has Payment Method Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/stripe_customer_id": {
      "get": {
        "tags": ["account"],
        "summary": "Get Stripe Customer Id",
        "description": "Get stripe customer id for an organization. Can be None.",
        "operationId": "get_stripe_customer_id_v0_org__org_id__stripe_customer_id_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Stripe Customer Id V0 Org  Org Id  Stripe Customer Id Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/reload_config": {
      "get": {
        "tags": ["account"],
        "summary": "Get reload config",
        "description": "Get reload config for an organization",
        "operationId": "get_reload_config_v0_org__org_id__reload_config_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          },
          {
            "name": "suggest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Suggest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ReloadConfigResponseModel"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Reload Config V0 Org  Org Id  Reload Config Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/manage_roles": {
      "post": {
        "tags": ["account"],
        "summary": "Manage user roles",
        "description": "Manage user roles (modify/delete) for an organization. Limited to admins. Updates records corresponding to the old role - raises error if old role does not match records. To delete a role, set new role to None.",
        "operationId": "modify_user_role_v0_org__org_id__manage_roles_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyUserRoleRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrgRelation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/list_users": {
      "get": {
        "tags": ["account"],
        "summary": "Get users in an organization",
        "description": "Get users in an organization. Limited to admins",
        "operationId": "list_org_users_v0_org__org_id__list_users_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUserListResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/user_roles": {
      "get": {
        "tags": ["account"],
        "summary": "Get user roles",
        "description": "Get roles of a user",
        "operationId": "view_user_roles_v0_user_roles_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrgRoleResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v0/user": {
      "get": {
        "tags": ["account"],
        "summary": "Get user roles",
        "description": "Get roles of a user",
        "operationId": "view_user_roles_v0_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrgRoleResponseModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v0/user_init": {
      "get": {
        "tags": ["account"],
        "summary": "Initialize user",
        "description": "Initialize user session and get initial data",
        "operationId": "get_initial_user_data_v0_user_init_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInitResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v0/token": {
      "post": {
        "tags": ["account"],
        "summary": "Check user access",
        "description": "Check user access to Parallel before returning access token",
        "operationId": "check_and_init_user_access_v0_token_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v0/apps": {
      "get": {
        "tags": ["account"],
        "summary": "Get user apps",
        "description": "Get all apps accessible by a user",
        "operationId": "view_user_apps_v0_apps_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAppResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/auto_reload": {
      "post": {
        "tags": ["account"],
        "summary": "Set up or update auto reload for an organization",
        "description": "Set up or update auto reload for an organization",
        "operationId": "auto_reload_update_v0_org__org_id__auto_reload_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoReloadSetupRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ReloadConfigResponseModel"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Auto Reload Update V0 Org  Org Id  Auto Reload Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/disable_auto_reload": {
      "post": {
        "tags": ["account"],
        "summary": "Disable auto reload for an organization",
        "description": "Disable auto reload for an organization",
        "operationId": "disable_auto_reload_v0_org__org_id__disable_auto_reload_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/reload_balance": {
      "post": {
        "tags": ["account"],
        "summary": "Customer initiated reload balance",
        "description": "Reload balance for an organization",
        "operationId": "reload_balance_v0_org__org_id__reload_balance_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReloadBalanceRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/get_balance_due": {
      "get": {
        "tags": ["account"],
        "summary": "Get due balance",
        "description": "Get due balance for an organization",
        "operationId": "get_balance_due_v0_org__org_id__get_balance_due_get",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceDueResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/user/onboard_check": {
      "post": {
        "tags": ["account"],
        "summary": "Check User",
        "description": "Check if a user can be onboarded.\n\nReturns the entity type that the user belongs to.",
        "operationId": "check_user_v0_user_onboard_check_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckUserOnboardResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v0/usage": {
      "get": {
        "tags": ["account"],
        "summary": "Get usage statistics",
        "description": "Get usage statistics for apps",
        "operationId": "view_usage_stats_v0_usage_get",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageStatsRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageStatsResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["account"],
        "summary": "Get usage statistics",
        "description": "Get usage statistics for apps",
        "operationId": "view_usage_stats_v0_usage_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageStatsRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageStatsResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/org/{org_id}/accept_legal_terms": {
      "post": {
        "tags": ["account"],
        "summary": "Accept legal terms",
        "description": "Accept legal terms for an organization",
        "operationId": "accept_legal_terms_v0_org__org_id__accept_legal_terms_post",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Accept Legal Terms V0 Org  Org Id  Accept Legal Terms Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/metronome_alerts": {
      "post": {
        "tags": ["account"],
        "summary": "Incoming webhook for alerts from Metronome",
        "description": "Incoming webhook for alerts from Metronome.",
        "operationId": "webhook_alerts_post_webhooks_metronome_alerts_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "properties": {
          "address1": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address1",
            "description": "Address line 1"
          },
          "address2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address2",
            "description": "Address line 2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City",
            "description": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "State"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "Country"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code",
            "description": "Postal code"
          }
        },
        "type": "object",
        "required": [
          "address1",
          "address2",
          "city",
          "state",
          "country",
          "postal_code"
        ],
        "title": "Address",
        "description": "Model for an organization's address."
      },
      "ApiKeyModel": {
        "properties": {
          "api_key_id": {
            "type": "string",
            "title": "Api Key Id",
            "description": "API Key ID"
          },
          "api_key_name": {
            "type": "string",
            "title": "Api Key Name",
            "description": "API Key Name"
          },
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "App ID"
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "App Name"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "Created by User ID"
          },
          "created_by_user_email": {
            "type": "string",
            "title": "Created By User Email",
            "description": "Created by User Email"
          },
          "display_value": {
            "type": "string",
            "title": "Display Value",
            "description": "Display Value"
          },
          "raw_api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Raw Api Key",
            "description": "Raw API Key"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "Created At"
          }
        },
        "type": "object",
        "required": [
          "api_key_id",
          "api_key_name",
          "app_id",
          "app_name",
          "created_by_user_id",
          "created_by_user_email",
          "display_value",
          "created_at"
        ],
        "title": "ApiKeyModel",
        "description": "Model for an API key."
      },
      "AppItem": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "App name"
          },
          "org_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Org Name",
            "description": "Organization name"
          },
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "App ID"
          },
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          }
        },
        "type": "object",
        "required": ["app_name", "org_name", "app_id", "org_id"],
        "title": "AppItem",
        "description": "Model for an application item."
      },
      "AppItemWithKeys": {
        "properties": {
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "App ID"
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "App Name"
          },
          "keys": {
            "items": {
              "$ref": "#/components/schemas/ApiKeyModel"
            },
            "type": "array",
            "title": "Keys",
            "description": "List of API Keys"
          }
        },
        "type": "object",
        "required": ["app_id", "app_name"],
        "title": "AppItemWithKeys",
        "description": "Model for an application item with keys."
      },
      "AutoReloadSetupRequestModel": {
        "properties": {
          "auto_reload_target_threshold_cents": {
            "type": "integer",
            "title": "Auto Reload Target Threshold Cents",
            "description": "Auto reload target threshold in cents"
          },
          "auto_reload_trigger_threshold_cents": {
            "type": "integer",
            "title": "Auto Reload Trigger Threshold Cents",
            "description": "Auto reload trigger threshold in cents"
          }
        },
        "type": "object",
        "required": [
          "auto_reload_target_threshold_cents",
          "auto_reload_trigger_threshold_cents"
        ],
        "title": "AutoReloadSetupRequestModel",
        "description": "Model for auto reload request."
      },
      "BalanceDueResponseModel": {
        "properties": {
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          },
          "credits_remaining": {
            "type": "number",
            "title": "Credits Remaining",
            "description": "Credits remaining"
          },
          "prepaid_commits_remaining": {
            "type": "number",
            "title": "Prepaid Commits Remaining",
            "description": "Commits remaining"
          },
          "postpaid_commits_remaining": {
            "type": "number",
            "title": "Postpaid Commits Remaining",
            "description": "Postpaid commits remaining"
          },
          "amount_owed": {
            "type": "number",
            "title": "Amount Owed",
            "description": "Amount owed"
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "credits_remaining",
          "prepaid_commits_remaining",
          "postpaid_commits_remaining",
          "amount_owed"
        ],
        "title": "BalanceDueResponseModel",
        "description": "Model for balance due response."
      },
      "CheckUserOnboardResponseModel": {
        "properties": {
          "is_onboarded": {
            "type": "boolean",
            "title": "Is Onboarded",
            "description": "Whether the user is already onboarded."
          },
          "entity_type": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["org", "individual"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Type",
            "description": "Type of entity. Can be a domain or individual. Empty if user is already onboarded."
          }
        },
        "type": "object",
        "required": ["is_onboarded", "entity_type"],
        "title": "CheckUserOnboardResponseModel",
        "description": "Model for checking user response."
      },
      "CreateApiKeyRequestModel": {
        "properties": {
          "api_key_name": {
            "type": "string",
            "title": "Api Key Name",
            "description": "API Key Name"
          }
        },
        "type": "object",
        "required": ["api_key_name"],
        "title": "CreateApiKeyRequestModel",
        "description": "Model for create API key request V2."
      },
      "CreateApiKeyResponseModel": {
        "properties": {
          "api_key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiKeyModel"
              }
            ],
            "description": "API Key"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "CreateApiKeyResponseModel",
        "description": "Model for create API key response."
      },
      "CreateAppRequestModel": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "App name"
          }
        },
        "type": "object",
        "required": ["app_name"],
        "title": "CreateAppRequestModel",
        "description": "Model for creating app request."
      },
      "CreateAppResponseModel": {
        "properties": {
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "App ID"
          }
        },
        "type": "object",
        "required": ["app_id"],
        "title": "CreateAppResponseModel",
        "description": "Model for creating app response."
      },
      "CreateOrgRequestModel": {
        "properties": {
          "org_name": {
            "type": "string",
            "title": "Org Name",
            "description": "Organization name"
          },
          "address1": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address1",
            "description": "Address line 1"
          },
          "address2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address2",
            "description": "Address line 2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City",
            "description": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "State"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "description": "Country"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code",
            "description": "Postal code"
          },
          "marketplace_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Token",
            "description": "Amazon Marketplace token. If specified, will override requires_card_on_file"
          },
          "marketplace_platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Platform",
            "description": "Marketplace platform"
          },
          "contact_email": {
            "type": "string",
            "title": "Contact Email",
            "description": "Contact email"
          },
          "requires_card_on_file": {
            "type": "boolean",
            "title": "Requires Card On File",
            "description": "Is card on file required for the company",
            "default": true
          }
        },
        "type": "object",
        "required": ["org_name", "contact_email"],
        "title": "CreateOrgRequestModel",
        "description": "Model for creating organization request."
      },
      "CreditCardPaymentMethod": {
        "properties": {
          "payment_method_id": {
            "type": "string",
            "title": "Payment Method Id",
            "description": "Payment method ID"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "description": "Is default payment method"
          },
          "brand": {
            "type": "string",
            "title": "Brand",
            "description": "Payment method brand"
          },
          "last4": {
            "type": "string",
            "title": "Last4",
            "description": "Last 4 digits of the payment method"
          },
          "exp_month": {
            "type": "integer",
            "title": "Exp Month",
            "description": "Expiration month"
          },
          "exp_year": {
            "type": "integer",
            "title": "Exp Year",
            "description": "Expiration year"
          }
        },
        "type": "object",
        "required": [
          "payment_method_id",
          "is_default",
          "brand",
          "last4",
          "exp_month",
          "exp_year"
        ],
        "title": "CreditCardPaymentMethod",
        "description": "Model for a card payment method."
      },
      "DefaultDomainResponseModel": {
        "properties": {
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          },
          "default_domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Default Domains",
            "description": "List of default domains for the organization"
          }
        },
        "type": "object",
        "required": ["org_id"],
        "title": "DefaultDomainResponseModel",
        "description": "Model for default domain response."
      },
      "GetApiKeysForOrgResponseModel": {
        "properties": {
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          },
          "apps": {
            "items": {
              "$ref": "#/components/schemas/AppItemWithKeys"
            },
            "type": "array",
            "title": "Apps",
            "description": "List of Apps with Keys"
          }
        },
        "type": "object",
        "required": ["org_id"],
        "title": "GetApiKeysForOrgResponseModel",
        "description": "Model for get API keys for organization response."
      },
      "GetAppsForOrgResponseModel": {
        "properties": {
          "apps": {
            "items": {
              "$ref": "#/components/schemas/AppItem"
            },
            "type": "array",
            "title": "Apps",
            "description": "List of apps"
          }
        },
        "type": "object",
        "title": "GetAppsForOrgResponseModel",
        "description": "Model for getting apps for organization response."
      },
      "GetRawApiKeysRequestModel": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "App Name"
          },
          "api_key_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Api Key Ids",
            "description": "List of API Key IDs"
          }
        },
        "type": "object",
        "required": ["app_name"],
        "title": "GetRawApiKeysRequestModel",
        "description": "Model for get raw app API keys request."
      },
      "GetRawApiKeysResponseModel": {
        "properties": {
          "raw_api_keys": {
            "items": {
              "$ref": "#/components/schemas/RawAppApiKey"
            },
            "type": "array",
            "title": "Raw Api Keys",
            "description": "List of Raw API Keys"
          }
        },
        "type": "object",
        "title": "GetRawApiKeysResponseModel",
        "description": "Model for get raw app API keys response V2."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InviteUserRequestModel": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User's email address"
          },
          "invite_as_role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRoleEnum"
              }
            ],
            "description": "Invite role"
          }
        },
        "type": "object",
        "required": ["email", "invite_as_role"],
        "title": "InviteUserRequestModel",
        "description": "Model for inviting user request."
      },
      "Metric": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Metric name"
          },
          "value": {
            "type": "number",
            "title": "Value",
            "description": "Metric value"
          }
        },
        "type": "object",
        "required": ["name", "value"],
        "title": "Metric",
        "description": "Model for a metric."
      },
      "ModifyUserRoleRequestModel": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "old_role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRoleEnum"
              }
            ],
            "description": "Old user role"
          },
          "new_role": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserRoleEnum"
              },
              {
                "type": "null"
              }
            ],
            "description": "New user role"
          }
        },
        "type": "object",
        "required": ["user_id", "old_role", "new_role"],
        "title": "ModifyUserRoleRequestModel",
        "description": "Model for modifying user role request."
      },
      "OnboardRequestModel": {
        "properties": {
          "entity_type": {
            "type": "string",
            "enum": ["domain", "individual"],
            "title": "Entity Type",
            "description": "Type of entity. Can be a domain or individual."
          },
          "marketplace_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Token",
            "description": "Marketplace token"
          },
          "marketplace_platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Platform",
            "description": "Marketplace platform"
          },
          "org_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Org Name",
            "description": "Organization name"
          }
        },
        "type": "object",
        "required": ["entity_type"],
        "title": "OnboardRequestModel",
        "description": "Model for onboarding request."
      },
      "OrgInfoResponseModel": {
        "properties": {
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          },
          "org_name": {
            "type": "string",
            "title": "Org Name",
            "description": "Organization name"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Organization address"
          },
          "contact_email": {
            "type": "string",
            "title": "Contact Email",
            "description": "Contact email"
          },
          "org_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrgMetadata"
              }
            ],
            "description": "Organization metadata"
          },
          "apps": {
            "items": {
              "$ref": "#/components/schemas/AppItem"
            },
            "type": "array",
            "title": "Apps",
            "description": "List of apps"
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "org_name",
          "address",
          "contact_email",
          "org_metadata"
        ],
        "title": "OrgInfoResponseModel",
        "description": "Model for organization information response."
      },
      "OrgMetadata": {
        "properties": {
          "legal_terms_accepted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Legal Terms Accepted",
            "description": "Legal terms accepted"
          },
          "legal_terms_accepted_by_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Legal Terms Accepted By User Id",
            "description": "User ID who accepted legal terms"
          },
          "legal_terms_accepted_at_epoch_secs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Legal Terms Accepted At Epoch Secs",
            "description": "Epoch time when legal terms were accepted"
          },
          "requires_card_on_file": {
            "type": "boolean",
            "title": "Requires Card On File",
            "description": "Is card on file required for the company",
            "default": true
          },
          "balance_below_threshold": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Below Threshold",
            "description": "Is balance below threshold"
          },
          "mpcu_customer": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mpcu Customer",
            "description": "Is grandfathered MPCU customer",
            "default": false
          },
          "default_domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Default Domains",
            "description": "List of default domains for the organization"
          },
          "org_product_access": {
            "items": {
              "$ref": "#/components/schemas/ProductEnum"
            },
            "type": "array",
            "title": "Org Product Access",
            "description": "List of products the organization has access to"
          }
        },
        "type": "object",
        "title": "OrgMetadata",
        "description": "Model for organization metadata."
      },
      "OrgUserListResponseModel": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/OrgUserResponseModel"
            },
            "type": "array",
            "title": "Users",
            "description": "List of users"
          }
        },
        "type": "object",
        "title": "OrgUserListResponseModel",
        "description": "Model for listing users in an organization."
      },
      "OrgUserResponseModel": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRoleEnum"
              }
            ],
            "description": "User role"
          }
        },
        "type": "object",
        "required": ["user_id", "email", "role"],
        "title": "OrgUserResponseModel",
        "description": "Model for a user in an organization."
      },
      "PaymentMethod": {
        "properties": {
          "payment_method_id": {
            "type": "string",
            "title": "Payment Method Id",
            "description": "Payment method ID"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "description": "Is default payment method"
          }
        },
        "type": "object",
        "required": ["payment_method_id", "is_default"],
        "title": "PaymentMethod",
        "description": "Model for a payment method."
      },
      "ProductEnum": {
        "type": "string",
        "enum": ["FIND_ALL"],
        "const": "FIND_ALL",
        "title": "ProductEnum",
        "description": "Available products in the system."
      },
      "RawAppApiKey": {
        "properties": {
          "api_key_id": {
            "type": "string",
            "title": "Api Key Id",
            "description": "API Key ID"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "API Key"
          }
        },
        "type": "object",
        "required": ["api_key_id", "api_key"],
        "title": "RawAppApiKey",
        "description": "Model for a raw app API key."
      },
      "ReloadBalanceRequestModel": {
        "properties": {
          "amount_dollars": {
            "type": "integer",
            "title": "Amount Dollars",
            "description": "Amount in dollars"
          },
          "payment_method_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method Id",
            "description": "Payment method ID"
          }
        },
        "type": "object",
        "required": ["amount_dollars"],
        "title": "ReloadBalanceRequestModel",
        "description": "Model for reloading credits request."
      },
      "ReloadConfigResponseModel": {
        "properties": {
          "auto_reload_target_threshold_cents": {
            "type": "integer",
            "title": "Auto Reload Target Threshold Cents",
            "description": "Auto reload target threshold in cents"
          },
          "auto_reload_trigger_threshold_cents": {
            "type": "integer",
            "title": "Auto Reload Trigger Threshold Cents",
            "description": "Auto reload trigger threshold in cents"
          },
          "suggested_reload_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SuggestedReloadResponseModel"
              },
              {
                "type": "null"
              }
            ],
            "description": "Suggested reload config"
          }
        },
        "type": "object",
        "required": [
          "auto_reload_target_threshold_cents",
          "auto_reload_trigger_threshold_cents"
        ],
        "title": "ReloadConfigResponseModel",
        "description": "Model for reload config response."
      },
      "RemoveDefaultDomainsRequestModel": {
        "properties": {
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Domains",
            "description": "List of domains to remove"
          }
        },
        "type": "object",
        "required": ["domains"],
        "title": "RemoveDefaultDomainsRequestModel",
        "description": "Model for removing default domains from an organization."
      },
      "SpanUsage": {
        "properties": {
          "usage_breakdown": {
            "items": {
              "$ref": "#/components/schemas/SpanUsageBreakdown"
            },
            "type": "array",
            "title": "Usage Breakdown",
            "description": "Usage breakdown"
          },
          "start_epoch_sec_incl": {
            "type": "integer",
            "title": "Start Epoch Sec Incl",
            "description": "Start epoch time inclusive"
          },
          "end_epoch_sec_excl": {
            "type": "integer",
            "title": "End Epoch Sec Excl",
            "description": "End epoch time exclusive"
          }
        },
        "type": "object",
        "required": ["start_epoch_sec_incl", "end_epoch_sec_excl"],
        "title": "SpanUsage",
        "description": "Model for span usage."
      },
      "SpanUsageBreakdown": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "App name"
          },
          "units": {
            "items": {
              "$ref": "#/components/schemas/Metric"
            },
            "type": "array",
            "title": "Units",
            "description": "List of metrics"
          }
        },
        "type": "object",
        "required": ["app_name"],
        "title": "SpanUsageBreakdown",
        "description": "Model for span usage breakdown."
      },
      "SuggestedReloadResponseModel": {
        "properties": {
          "suggested_auto_reload_target_threshold_cents": {
            "type": "integer",
            "title": "Suggested Auto Reload Target Threshold Cents",
            "description": "Suggested auto reload target threshold in cents"
          },
          "suggested_auto_reload_trigger_threshold_cents": {
            "type": "integer",
            "title": "Suggested Auto Reload Trigger Threshold Cents",
            "description": "Suggested auto reload trigger threshold in cents"
          },
          "suggested_reload_cents": {
            "type": "integer",
            "title": "Suggested Reload Cents",
            "description": "Suggested reload in cents"
          }
        },
        "type": "object",
        "required": [
          "suggested_auto_reload_target_threshold_cents",
          "suggested_auto_reload_trigger_threshold_cents",
          "suggested_reload_cents"
        ],
        "title": "SuggestedReloadResponseModel",
        "description": "Model for suggested reload response."
      },
      "TokenResponseModel": {
        "properties": {
          "first_login": {
            "type": "boolean",
            "title": "First Login",
            "description": "Whether the user was just created."
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["first_login"],
        "title": "TokenResponseModel",
        "description": "Model for token response."
      },
      "UpdateDomainAccessRequestModel": {
        "properties": {
          "domain": {
            "type": "string",
            "title": "Domain",
            "description": "Domain"
          },
          "is_allowed": {
            "type": "boolean",
            "title": "Is Allowed",
            "description": "Is domain allowed"
          },
          "action_by_email_address": {
            "type": "string",
            "title": "Action By Email Address",
            "description": "Email address of the action taker"
          },
          "set_up_org": {
            "type": "boolean",
            "title": "Set Up Org",
            "description": "Whether to set up the org",
            "default": false
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email",
            "description": "Contact email for the org. Ignored if setup org is false"
          },
          "marketplace_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Token",
            "description": "Marketplace token"
          },
          "marketplace_platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Platform",
            "description": "Marketplace platform"
          }
        },
        "type": "object",
        "required": ["domain", "is_allowed", "action_by_email_address"],
        "title": "UpdateDomainAccessRequestModel",
        "description": "Model for updating domain access request."
      },
      "UsageStatsRequestModel": {
        "properties": {
          "start_epoch_sec_incl": {
            "type": "integer",
            "title": "Start Epoch Sec Incl",
            "description": "Start epoch time inclusive"
          },
          "end_epoch_sec_excl": {
            "type": "integer",
            "title": "End Epoch Sec Excl",
            "description": "End epoch time exclusive"
          },
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          },
          "interval": {
            "type": "string",
            "title": "Interval",
            "description": "Interval"
          },
          "app_names": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "App Names",
            "description": "List of app names"
          }
        },
        "type": "object",
        "required": [
          "start_epoch_sec_incl",
          "end_epoch_sec_excl",
          "org_id",
          "interval"
        ],
        "title": "UsageStatsRequestModel",
        "description": "Model for usage statistics request."
      },
      "UsageStatsResponseModel": {
        "properties": {
          "usage": {
            "items": {
              "$ref": "#/components/schemas/SpanUsage"
            },
            "type": "array",
            "title": "Usage",
            "description": "Usage statistics"
          }
        },
        "type": "object",
        "title": "UsageStatsResponseModel",
        "description": "Model for usage statistics response."
      },
      "UserAppResponseModel": {
        "properties": {
          "apps": {
            "items": {
              "$ref": "#/components/schemas/AppItem"
            },
            "type": "array",
            "title": "Apps",
            "description": "List of apps"
          }
        },
        "type": "object",
        "title": "UserAppResponseModel",
        "description": "Model for user app response."
      },
      "UserInitResponseModel": {
        "properties": {
          "has_access": {
            "type": "boolean",
            "title": "Has Access",
            "description": "Has access"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          }
        },
        "type": "object",
        "required": ["has_access", "user_id"],
        "title": "UserInitResponseModel",
        "description": "Model for user initialization response."
      },
      "UserOrgRelation": {
        "properties": {
          "org_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Org Name",
            "description": "Organization name"
          },
          "role": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserRoleEnum"
              },
              {
                "type": "null"
              }
            ],
            "description": "User role in the organization"
          },
          "org_id": {
            "type": "string",
            "title": "Org Id",
            "description": "Organization ID"
          }
        },
        "type": "object",
        "required": ["org_id"],
        "title": "UserOrgRelation",
        "description": "Model for user-organization relation."
      },
      "UserOrgRoleResponseModel": {
        "properties": {
          "user_org_relations": {
            "items": {
              "$ref": "#/components/schemas/UserOrgRelation"
            },
            "type": "array",
            "title": "User Org Relations",
            "description": "List of user organization relations"
          }
        },
        "type": "object",
        "title": "UserOrgRoleResponseModel",
        "description": "Model for user information response."
      },
      "UserRoleEnum": {
        "type": "string",
        "enum": ["admin", "member"],
        "title": "UserRoleEnum",
        "description": "Roles for a user."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "WhitelistEntityRequestModel": {
        "properties": {
          "entity_identifier": {
            "type": "string",
            "title": "Entity Identifier",
            "description": "Entity identifier. Can be a domain, email or phone number"
          },
          "entity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WhitelistedEntityType"
              }
            ],
            "description": "Type of entity. Can be a domain, email or phone number"
          },
          "is_allowed": {
            "type": "boolean",
            "title": "Is Allowed",
            "description": "Is entity allowed"
          },
          "action_by_email_address": {
            "type": "string",
            "title": "Action By Email Address",
            "description": "Email address of the action taker."
          },
          "set_up_org": {
            "type": "boolean",
            "title": "Set Up Org",
            "description": "Whether to set up the org",
            "default": false
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email",
            "description": "Contact email for the org. Ignored if setup org is false"
          },
          "marketplace_token": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Token",
            "description": "Marketplace token"
          },
          "marketplace_platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Marketplace Platform",
            "description": "Marketplace platform"
          }
        },
        "type": "object",
        "required": [
          "entity_identifier",
          "entity_type",
          "is_allowed",
          "action_by_email_address"
        ],
        "title": "WhitelistEntityRequestModel",
        "description": "Model for whitelisting entity request."
      },
      "WhitelistEntityResponseModel": {
        "properties": {
          "whitelist_id": {
            "type": "string",
            "title": "Whitelist Id",
            "description": "Whitelist ID"
          },
          "entity_identifier": {
            "type": "string",
            "title": "Entity Identifier",
            "description": "Entity identifier"
          },
          "entity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WhitelistedEntityType"
              }
            ],
            "description": "Type of entity. Can be a domain, email or phone number"
          },
          "is_allowed": {
            "type": "boolean",
            "title": "Is Allowed",
            "description": "Is entity allowed"
          },
          "last_modified_at": {
            "type": "string",
            "title": "Last Modified At",
            "description": "Last updated time in UTC"
          },
          "action_by_email_address": {
            "type": "string",
            "title": "Action By Email Address",
            "description": "Email address of the person who whitelisted the entity"
          }
        },
        "type": "object",
        "required": [
          "whitelist_id",
          "entity_identifier",
          "entity_type",
          "is_allowed",
          "last_modified_at",
          "action_by_email_address"
        ],
        "title": "WhitelistEntityResponseModel",
        "description": "Model for response on whitelisting an entity."
      },
      "WhitelistedEntityType": {
        "type": "string",
        "enum": ["domain", "email"],
        "title": "WhitelistedEntityType",
        "description": "Type of whitelisted entity."
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.parallel.ai",
      "description": "Parallel API"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
